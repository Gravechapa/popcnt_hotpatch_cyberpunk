// popcnt_hotpatch.cpp : Defines the exported functions for the DLL application.
//

#include "stdafx.h"
#include "popcnt_hotpatch.h"
#include <bit>

// This is an example of an exported variable
POPCNT_HOTPATCH_API unsigned char icudt65_dat[] = {
    0x20, 0x00, 0xDA, 0x27, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x54, 0x6F, 0x43, 0x50,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


uint64_t GetModuleBase(const char *modname)
{
    HANDLE hModSnap;
    MODULEENTRY32 pe32;
    void *bs = NULL;

    // Take a snapshot of all processes in the system.
    hModSnap = CreateToolhelp32Snapshot( TH32CS_SNAPMODULE, GetCurrentProcessId() );
    if( hModSnap == INVALID_HANDLE_VALUE )
    {
        return NULL;
    }

    // Set the size of the structure before using it.
    pe32.dwSize = sizeof( MODULEENTRY32 );

    if( !Module32First( hModSnap, &pe32 ) )
    {
        CloseHandle( hModSnap );     // Must clean up the snapshot object!
        return NULL;
    }

    do
    {
        if (!StrCmpI(pe32.szModule, modname)) {
            bs = pe32.modBaseAddr;
            break;
        }
    } while( Module32Next( hModSnap, &pe32 ) );

    CloseHandle( hModSnap );

    return (uint64_t)bs;
}

uint64_t g_imageBase = 0;

#define HOTFIX(dest, src, instr_size) \
        (dest) = std::popcount((src)); \
        ctx->Rip += (instr_size); \
        return EXCEPTION_CONTINUE_EXECUTION; \

LONG NTAPI vec_handler(EXCEPTION_POINTERS *ExceptionInfo)
{
    uint64_t rebasedRip = ExceptionInfo->ContextRecord->Rip - g_imageBase;
    if (ExceptionInfo->ExceptionRecord->ExceptionCode != 0xc000001d)
        return EXCEPTION_CONTINUE_SEARCH;

    PCONTEXT ctx = ExceptionInfo->ContextRecord;
    
    //////////////////////////////////////1.22///////////////////////////////////
    //Automatically generated by the script
    switch (rebasedRip)
    {
        case 0x45c5cd:
        case 0xb9dae5:
        case 0xbd5f13:
        case 0xbd6526:
        case 0x279c2dc:
            HOTFIX(ctx->Rax, ctx->Rcx, 5)
        case 0x48d560:
        case 0x48d581:
        case 0x48fa30:
        case 0x48fa60:
        case 0x48fb90:
        case 0x48fbc0:
        case 0x490990:
        case 0x4909c0:
        case 0x492e60:
        case 0x494ea0:
        case 0x497440:
        case 0x49af80:
        case 0x49b510:
        case 0x49cc10:
        case 0x4a0380:
        case 0x4a0c70:
        case 0xb9dab0:
        case 0xbd5ee0:
        case 0xbd5f40:
        case 0xbd64f0:
        case 0x11d1ba0:
        case 0x1523fc0:
        case 0x17f2c50:
        case 0x251e580:
        case 0x2520830:
        case 0x2520b40:
        case 0x26d3b50:
        case 0x279c2b0:
        case 0x2b122a0:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rcx), 5)
        case 0x48d592:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x38), 7)
        case 0x48f730:
        case 0x48f760:
        case 0x48ffd0:
        case 0x490000:
        case 0x4900b0:
        case 0x4900e0:
        case 0x4901b0:
        case 0x4901e0:
        case 0x490290:
        case 0x4902c0:
        case 0xb9e3e0:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rdx), 5)
        case 0x48f742:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x41), 6)
        case 0x48f772:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x21), 6)
        case 0x48fa71:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x29), 6)
        case 0x48fba1:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x9), 6)
        case 0x48fbd2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x17), 6)
        case 0x48ffe2:
        case 0x4902d2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x48), 7)
        case 0x490012:
        case 0x4902a2:
        case 0x49af90:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x68), 7)
        case 0x4900c2:
        case 0x4901f2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x78), 6)
        case 0x4900f2:
        case 0x4901c2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x58), 6)
        case 0x4909d1:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x8), 6)
        case 0x492e71:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R13 + 0x30), 6)
        case 0x494eb9:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R11 + ctx->R10 * 1 + 0x30), 7)
        case 0x499472:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rcx + 0x18), 6)
        case 0x49ae61:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x10), 6)
        case 0x49b521:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R9 + ctx->R12 * 1 + 0x30), 7)
        case 0x49cc21:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + 0x30), 7)
        case 0x4a0390:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + 0x18), 7)
        case 0xb9e418:
            HOTFIX(ctx->Rax, ctx->R8, 5)
        case 0xbd5f73:
        case 0x251e5b7:
        case 0x2520862:
        case 0x2520b72:
        case 0x26d3b8a:
            HOTFIX(ctx->Rax, ctx->Rdx, 5)
        case 0x11d1a60:
        case 0x17f26c0:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R8), 5)
        case 0x11d1a72:
        case 0x11d1bb1:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsi + 0x18), 6)
        case 0x11f47b1:
            HOTFIX(ctx->Rax, ctx->Rbx, 5)
        case 0x11f7d5f:
            HOTFIX(ctx->Rax, ctx->Rdx & 0xFFFFFFFFULL, 4)
        case 0x121e886:
            HOTFIX(ctx->Rax, ctx->R9 & 0xFFFFFFFFULL, 5)
        case 0x17f3250:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx), 4)
        case 0x17f325f:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rsi + 0xfc), 8)
        case 0x1ba4138:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R15 + 0x18), 6)
        case 0x1ba47b2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R14 + 0x4), 6)
        case 0x1ba5955:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R8), 5)
        case 0x1c0c4a5:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x6c), 5)
        case 0x1c0ca01:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x98), 8)
        case 0x1c0d272:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x68), 5)
        case 0x48d572:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x18), 7)
        case 0x48fa41:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x49), 6)
        case 0x4909a1:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x28), 6)
        case 0x48f840:
        case 0x48f870:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->R8), 5)
        case 0x48f852:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x1), 6)
        case 0x48f881:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x1f), 6)
        case 0x499460:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rax), 5)
        case 0x1523fd1:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->R8 + 0x3f8), 9)
        case 0x490380:
        case 0x4903b0:
        case 0x490460:
        case 0x490490:
        case 0x490580:
        case 0x4905b0:
        case 0x490650:
        case 0x490680:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->R9), 5)
        case 0x490392:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x58), 6)
        case 0x4903c2:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x78), 6)
        case 0x490472:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x68), 7)
        case 0x4904a2:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x48), 7)
        case 0x490592:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x38), 6)
        case 0x4905c2:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x18), 6)
        case 0x490662:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x8), 6)
        case 0x490692:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x28), 6)
        case 0x497451:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rdi + 0x30), 6)
        case 0x4a0c81:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbx + 0x30), 6)
        case 0x490b00:
        case 0x490b30:
        case 0x49ae50:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rdx), 5)
        case 0x490b12:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x8), 6)
        case 0x490b42:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x28), 6)
        case 0x4c07eb:
            HOTFIX(ctx->Rcx, ctx->Rax, 5)
        case 0xb2f3aa:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint32_t*>(ctx->Rcx), 4)
        case 0x104aabd:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rcx + 0xa0), 9)
        case 0x121e882:
            HOTFIX(ctx->Rcx, ctx->Rax & 0xFFFFFFFFULL, 4)
        case 0x1c0d800:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint32_t*>(ctx->Rdi + 0x98), 8)
        case 0x22f336d:
            HOTFIX(ctx->Rbx, *reinterpret_cast<uint32_t*>(ctx->Rsi + 0x7c), 5)
    }
    /////////////////////////////////////////////////////////////////////////////////////

    FILE *fp = fopen("hotpatch.log", "at");
    fprintf(fp, "Unknown: %016I64X\n", rebasedRip);
    fclose(fp);

    return EXCEPTION_CONTINUE_SEARCH;
}

// This is an example of an exported function.
POPCNT_HOTPATCH_API int install_hooks(void)
{
    g_imageBase = GetModuleBase("Cyberpunk2077.exe");
    AddVectoredExceptionHandler(1, vec_handler);
    return 0;
}
