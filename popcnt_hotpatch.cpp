// popcnt_hotpatch.cpp : Defines the exported functions for the DLL application.
//

#include "stdafx.h"
#include "popcnt_hotpatch.h"
#include <bit>

// This is an example of an exported variable
POPCNT_HOTPATCH_API unsigned char icudt65_dat[] = {
    0x20, 0x00, 0xDA, 0x27, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x54, 0x6F, 0x43, 0x50,
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};


uint64_t GetModuleBase(const char *modname)
{
    HANDLE hModSnap;
    MODULEENTRY32 pe32;
    void *bs = NULL;

    // Take a snapshot of all processes in the system.
    hModSnap = CreateToolhelp32Snapshot( TH32CS_SNAPMODULE, GetCurrentProcessId() );
    if( hModSnap == INVALID_HANDLE_VALUE )
    {
        return NULL;
    }

    // Set the size of the structure before using it.
    pe32.dwSize = sizeof( MODULEENTRY32 );

    if( !Module32First( hModSnap, &pe32 ) )
    {
        CloseHandle( hModSnap );     // Must clean up the snapshot object!
        return NULL;
    }

    do
    {
        if (!StrCmpI(pe32.szModule, modname)) {
            bs = pe32.modBaseAddr;
            break;
        }
    } while( Module32Next( hModSnap, &pe32 ) );

    CloseHandle( hModSnap );

    return (uint64_t)bs;
}

uint64_t g_imageBase = 0;

#define HOTFIX(dest, src, instr_size) \
        (dest) = std::popcount((src)); \
        ctx->Rip += (instr_size); \
        return EXCEPTION_CONTINUE_EXECUTION; \

LONG NTAPI vec_handler(EXCEPTION_POINTERS *ExceptionInfo)
{
    uint64_t rebasedRip = ExceptionInfo->ContextRecord->Rip - g_imageBase;
    if (ExceptionInfo->ExceptionRecord->ExceptionCode != 0xc000001d)
        return EXCEPTION_CONTINUE_SEARCH;

    PCONTEXT ctx = ExceptionInfo->ContextRecord;
    
    //////////////////////////////////////1.21///////////////////////////////////
    //Automatically generated by the script
    switch (rebasedRip)
    {
        case 0x45c5ad:
        case 0xb9d8b5:
        case 0xbd5ce3:
        case 0xbd62f6:
        case 0x279ba5c:
            HOTFIX(ctx->Rax, ctx->Rcx, 5)
        case 0x48d540:
        case 0x48d561:
        case 0x48fa10:
        case 0x48fa40:
        case 0x48fb70:
        case 0x48fba0:
        case 0x490970:
        case 0x4909a0:
        case 0x492e40:
        case 0x494e80:
        case 0x497420:
        case 0x49af60:
        case 0x49b4f0:
        case 0x49cbf0:
        case 0x4a0360:
        case 0x4a0c50:
        case 0xb9d880:
        case 0xbd5cb0:
        case 0xbd5d10:
        case 0xbd62c0:
        case 0x11d1880:
        case 0x1523a00:
        case 0x17f2690:
        case 0x251df70:
        case 0x2520220:
        case 0x2520530:
        case 0x26d32f0:
        case 0x279ba30:
        case 0x2b11e70:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rcx), 5)
        case 0x48d572:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x38), 7)
        case 0x48f710:
        case 0x48f740:
        case 0x48ffb0:
        case 0x48ffe0:
        case 0x490090:
        case 0x4900c0:
        case 0x490190:
        case 0x4901c0:
        case 0x490270:
        case 0x4902a0:
        case 0xb9e1b0:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rdx), 5)
        case 0x48f722:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x41), 6)
        case 0x48f752:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x21), 6)
        case 0x48fa51:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x29), 6)
        case 0x48fb81:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x9), 6)
        case 0x48fbb2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x17), 6)
        case 0x48ffc2:
        case 0x4902b2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x48), 7)
        case 0x48fff2:
        case 0x490282:
        case 0x49af70:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x68), 7)
        case 0x4900a2:
        case 0x4901d2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x78), 6)
        case 0x4900d2:
        case 0x4901a2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x58), 6)
        case 0x4909b1:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x8), 6)
        case 0x492e51:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R13 + 0x30), 6)
        case 0x494e99:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R11 + ctx->R10 * 1 + 0x30), 7)
        case 0x499452:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rcx + 0x18), 6)
        case 0x49ae41:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x10), 6)
        case 0x49b501:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R9 + ctx->R12 * 1 + 0x30), 7)
        case 0x49cc01:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + 0x30), 7)
        case 0x4a0370:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R12 + 0x18), 7)
        case 0xb9e1e8:
            HOTFIX(ctx->Rax, ctx->R8, 5)
        case 0xbd5d43:
        case 0x251dfa7:
        case 0x2520252:
        case 0x2520562:
        case 0x26d332a:
            HOTFIX(ctx->Rax, ctx->Rdx, 5)
        case 0x11d1740:
        case 0x17f2100:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->R8), 5)
        case 0x11d1752:
        case 0x11d1891:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint64_t*>(ctx->Rsi + 0x18), 6)
        case 0x11f4491:
            HOTFIX(ctx->Rax, ctx->Rbx, 5)
        case 0x11f7aef:
            HOTFIX(ctx->Rax, ctx->Rdx & 0xFFFFFFFFULL, 4)
        case 0x121e2f6:
            HOTFIX(ctx->Rax, ctx->R9 & 0xFFFFFFFFULL, 5)
        case 0x17f2c90:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx), 4)
        case 0x17f2c9f:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rsi + 0xfc), 8)
        case 0x1ba3b38:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R15 + 0x18), 6)
        case 0x1ba41b2:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R14 + 0x4), 6)
        case 0x1ba5355:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->R8), 5)
        case 0x1c0bea5:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x6c), 5)
        case 0x1c0c401:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x98), 8)
        case 0x1c0cc72:
            HOTFIX(ctx->Rax, *reinterpret_cast<uint32_t*>(ctx->Rcx + 0x68), 5)
        case 0x48d552:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x18), 7)
        case 0x48fa21:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x49), 6)
        case 0x490981:
            HOTFIX(ctx->R10, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x28), 6)
        case 0x48f820:
        case 0x48f850:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->R8), 5)
        case 0x48f832:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x1), 6)
        case 0x48f861:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x1f), 6)
        case 0x499440:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->Rax), 5)
        case 0x1523a11:
            HOTFIX(ctx->Rdx, *reinterpret_cast<uint64_t*>(ctx->R8 + 0x3f8), 9)
        case 0x490360:
        case 0x490390:
        case 0x490440:
        case 0x490470:
        case 0x490560:
        case 0x490590:
        case 0x490630:
        case 0x490660:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->R9), 5)
        case 0x490372:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x58), 6)
        case 0x4903a2:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x78), 6)
        case 0x490452:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x68), 7)
        case 0x490482:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rsp + 0x48), 7)
        case 0x490572:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x38), 6)
        case 0x4905a2:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x18), 6)
        case 0x490642:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x8), 6)
        case 0x490672:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbp + 0x28), 6)
        case 0x497431:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rdi + 0x30), 6)
        case 0x4a0c61:
            HOTFIX(ctx->R8, *reinterpret_cast<uint64_t*>(ctx->Rbx + 0x30), 6)
        case 0x490ae0:
        case 0x490b10:
        case 0x49ae30:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rdx), 5)
        case 0x490af2:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x8), 6)
        case 0x490b22:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rbp - 0x28), 6)
        case 0x4c07cb:
            HOTFIX(ctx->Rcx, ctx->Rax, 5)
        case 0xb2f17a:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint32_t*>(ctx->Rcx), 4)
        case 0x104a7ed:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint64_t*>(ctx->Rcx + 0xa0), 9)
        case 0x121e2f2:
            HOTFIX(ctx->Rcx, ctx->Rax & 0xFFFFFFFFULL, 4)
        case 0x1c0d200:
            HOTFIX(ctx->Rcx, *reinterpret_cast<uint32_t*>(ctx->Rdi + 0x98), 8)
        case 0x22f2d5d:
            HOTFIX(ctx->Rbx, *reinterpret_cast<uint32_t*>(ctx->Rsi + 0x7c), 5)
    }
    /////////////////////////////////////////////////////////////////////////////////////

    FILE *fp = fopen("hotpatch.log", "at");
    fprintf(fp, "Unknown: %016I64X\n", rebasedRip);
    fclose(fp);

    return EXCEPTION_CONTINUE_SEARCH;
}

// This is an example of an exported function.
POPCNT_HOTPATCH_API int install_hooks(void)
{
    g_imageBase = GetModuleBase("Cyberpunk2077.exe");
    AddVectoredExceptionHandler(1, vec_handler);
    return 0;
}
